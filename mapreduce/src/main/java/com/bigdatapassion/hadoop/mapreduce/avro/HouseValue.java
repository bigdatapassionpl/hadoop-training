/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.bigdatapassion.hadoop.mapreduce.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HouseValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HouseValue\",\"namespace\":\"com.bigdatapassion.hadoop.mapreduce.avro\",\"fields\":[{\"name\":\"count\",\"type\":\"long\"},{\"name\":\"landArea\",\"type\":\"int\"},{\"name\":\"grossArea\",\"type\":\"int\"},{\"name\":\"yearBuilt\",\"type\":\"int\"},{\"name\":\"salePrice\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long count;
  @Deprecated public int landArea;
  @Deprecated public int grossArea;
  @Deprecated public int yearBuilt;
  @Deprecated public int salePrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HouseValue() {}

  /**
   * All-args constructor.
   */
  public HouseValue(java.lang.Long count, java.lang.Integer landArea, java.lang.Integer grossArea, java.lang.Integer yearBuilt, java.lang.Integer salePrice) {
    this.count = count;
    this.landArea = landArea;
    this.grossArea = grossArea;
    this.yearBuilt = yearBuilt;
    this.salePrice = salePrice;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return count;
    case 1: return landArea;
    case 2: return grossArea;
    case 3: return yearBuilt;
    case 4: return salePrice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: count = (java.lang.Long)value$; break;
    case 1: landArea = (java.lang.Integer)value$; break;
    case 2: grossArea = (java.lang.Integer)value$; break;
    case 3: yearBuilt = (java.lang.Integer)value$; break;
    case 4: salePrice = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'count' field.
   */
  public java.lang.Long getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Long value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'landArea' field.
   */
  public java.lang.Integer getLandArea() {
    return landArea;
  }

  /**
   * Sets the value of the 'landArea' field.
   * @param value the value to set.
   */
  public void setLandArea(java.lang.Integer value) {
    this.landArea = value;
  }

  /**
   * Gets the value of the 'grossArea' field.
   */
  public java.lang.Integer getGrossArea() {
    return grossArea;
  }

  /**
   * Sets the value of the 'grossArea' field.
   * @param value the value to set.
   */
  public void setGrossArea(java.lang.Integer value) {
    this.grossArea = value;
  }

  /**
   * Gets the value of the 'yearBuilt' field.
   */
  public java.lang.Integer getYearBuilt() {
    return yearBuilt;
  }

  /**
   * Sets the value of the 'yearBuilt' field.
   * @param value the value to set.
   */
  public void setYearBuilt(java.lang.Integer value) {
    this.yearBuilt = value;
  }

  /**
   * Gets the value of the 'salePrice' field.
   */
  public java.lang.Integer getSalePrice() {
    return salePrice;
  }

  /**
   * Sets the value of the 'salePrice' field.
   * @param value the value to set.
   */
  public void setSalePrice(java.lang.Integer value) {
    this.salePrice = value;
  }

  /** Creates a new HouseValue RecordBuilder */
  public static com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder newBuilder() {
    return new com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder();
  }
  
  /** Creates a new HouseValue RecordBuilder by copying an existing Builder */
  public static com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder newBuilder(com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder other) {
    return new com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder(other);
  }
  
  /** Creates a new HouseValue RecordBuilder by copying an existing HouseValue instance */
  public static com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder newBuilder(com.bigdatapassion.hadoop.mapreduce.avro.HouseValue other) {
    return new com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder(other);
  }
  
  /**
   * RecordBuilder for HouseValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HouseValue>
    implements org.apache.avro.data.RecordBuilder<HouseValue> {

    private long count;
    private int landArea;
    private int grossArea;
    private int yearBuilt;
    private int salePrice;

    /** Creates a new Builder */
    private Builder() {
      super(com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.count)) {
        this.count = data().deepCopy(fields()[0].schema(), other.count);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.landArea)) {
        this.landArea = data().deepCopy(fields()[1].schema(), other.landArea);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.grossArea)) {
        this.grossArea = data().deepCopy(fields()[2].schema(), other.grossArea);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.yearBuilt)) {
        this.yearBuilt = data().deepCopy(fields()[3].schema(), other.yearBuilt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salePrice)) {
        this.salePrice = data().deepCopy(fields()[4].schema(), other.salePrice);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HouseValue instance */
    private Builder(com.bigdatapassion.hadoop.mapreduce.avro.HouseValue other) {
            super(com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.SCHEMA$);
      if (isValidValue(fields()[0], other.count)) {
        this.count = data().deepCopy(fields()[0].schema(), other.count);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.landArea)) {
        this.landArea = data().deepCopy(fields()[1].schema(), other.landArea);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.grossArea)) {
        this.grossArea = data().deepCopy(fields()[2].schema(), other.grossArea);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.yearBuilt)) {
        this.yearBuilt = data().deepCopy(fields()[3].schema(), other.yearBuilt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salePrice)) {
        this.salePrice = data().deepCopy(fields()[4].schema(), other.salePrice);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'count' field */
    public java.lang.Long getCount() {
      return count;
    }
    
    /** Sets the value of the 'count' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder setCount(long value) {
      validate(fields()[0], value);
      this.count = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'count' field has been set */
    public boolean hasCount() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'count' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder clearCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'landArea' field */
    public java.lang.Integer getLandArea() {
      return landArea;
    }
    
    /** Sets the value of the 'landArea' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder setLandArea(int value) {
      validate(fields()[1], value);
      this.landArea = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'landArea' field has been set */
    public boolean hasLandArea() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'landArea' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder clearLandArea() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'grossArea' field */
    public java.lang.Integer getGrossArea() {
      return grossArea;
    }
    
    /** Sets the value of the 'grossArea' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder setGrossArea(int value) {
      validate(fields()[2], value);
      this.grossArea = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'grossArea' field has been set */
    public boolean hasGrossArea() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'grossArea' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder clearGrossArea() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'yearBuilt' field */
    public java.lang.Integer getYearBuilt() {
      return yearBuilt;
    }
    
    /** Sets the value of the 'yearBuilt' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder setYearBuilt(int value) {
      validate(fields()[3], value);
      this.yearBuilt = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'yearBuilt' field has been set */
    public boolean hasYearBuilt() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'yearBuilt' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder clearYearBuilt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'salePrice' field */
    public java.lang.Integer getSalePrice() {
      return salePrice;
    }
    
    /** Sets the value of the 'salePrice' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder setSalePrice(int value) {
      validate(fields()[4], value);
      this.salePrice = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'salePrice' field has been set */
    public boolean hasSalePrice() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'salePrice' field */
    public com.bigdatapassion.hadoop.mapreduce.avro.HouseValue.Builder clearSalePrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public HouseValue build() {
      try {
        HouseValue record = new HouseValue();
        record.count = fieldSetFlags()[0] ? this.count : (java.lang.Long) defaultValue(fields()[0]);
        record.landArea = fieldSetFlags()[1] ? this.landArea : (java.lang.Integer) defaultValue(fields()[1]);
        record.grossArea = fieldSetFlags()[2] ? this.grossArea : (java.lang.Integer) defaultValue(fields()[2]);
        record.yearBuilt = fieldSetFlags()[3] ? this.yearBuilt : (java.lang.Integer) defaultValue(fields()[3]);
        record.salePrice = fieldSetFlags()[4] ? this.salePrice : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
